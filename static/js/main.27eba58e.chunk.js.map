{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Tags","tagname","id","className","key","App","useState","setTagName","tags","setTags","onSubmit","e","preventDefault","htmlFor","value","onChange","target","placeholder","map","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAEA,SAASA,EAAT,GAAgC,IAAhBC,EAAe,EAAfA,QAASC,EAAM,EAANA,GACvB,OACE,yBAAKC,UAAU,oBAAoBD,GAAG,WAAWE,IAAKF,GACpD,0BAAMC,UAAU,mFACd,0BAAMA,UAAU,qHAAhB,KAGA,0BAAMA,UAAU,WAAWF,KAmDpBI,MA9Cf,WAAe,MAEiBC,mBAAS,IAF1B,mBAENL,EAFM,KAEGM,EAFH,OAGWD,mBAAS,IAHpB,mBAGNE,EAHM,KAGAC,EAHA,KAKb,OACE,6BACE,yBAAKN,UAAU,oFACb,0BACEA,UAAU,YACVO,SAAU,SAAAC,GACRA,EAAEC,iBACFH,EAAQ,GAAD,mBAAKD,GAAL,CAAWP,KAClBM,EAAW,MAGb,2BACEM,QAAQ,OACRV,UAAU,mDAFZ,QAMA,2BACEW,MAAOb,EACPc,SAAU,SAAAJ,GACRJ,EAAWI,EAAEK,OAAOF,QAEtBG,YAAY,aACZf,GAAG,OACHC,UAAU,2IAEZ,0BAAMA,UAAU,yBAChB,yBAAKA,UAAU,uBACb,4BAAQA,UAAU,iFAAlB,YAKHK,EAAKU,KAAI,SAACC,EAAMjB,GACf,OAAO,kBAACF,EAAD,CAAMC,QAASkB,EAAMjB,GAAIA,EAAIE,IAAKF,UCzC/BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27eba58e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nfunction Tags({ tagname, id }) {\n  return (\n    <div className=\"inline-block mt-3\" id=\"tag-name\" key={id}>\n      <span className=\"bg-gray-300 pr-2 mr-1 px-1 py-2 pt-1 border border-gray-400 rounded-full w-auto\">\n        <span className=\"hover:border-gray-600 text-justify pb-1 mr-1 px-2 ml mb-4 border border-red-300 rounded-full text-sm text-red-500\">\n          x\n        </span>\n        <span className=\"text-sm\">{tagname}</span>\n      </span>\n    </div>\n  );\n}\nfunction App() {\n  // const tag = [\"name\"];\n  const [tagname, setTagName] = useState(\"\");\n  const [tags, setTags] = useState([]);\n  // function handleInput() {}\n  return (\n    <div>\n      <div className=\"border border-gray-400 mt-2 ml-2 px-6 py-4 w-1/5 rounded-lg focus:shadow-outline\">\n        <form\n          className=\"ml-2 mt-3\"\n          onSubmit={e => {\n            e.preventDefault();\n            setTags([...tags, tagname]);\n            setTagName(\"\");\n          }}\n        >\n          <label\n            htmlFor=\"name\"\n            className=\"block text-gray-700 text-sm font-bold mb-2 px-1\"\n          >\n            Name\n          </label>\n          <input\n            value={tagname}\n            onChange={e => {\n              setTagName(e.target.value);\n            }}\n            placeholder=\"Enter name\"\n            id=\"name\"\n            className=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-50 appearance-none leading-normal\"\n          />\n          <span className=\"text-xs text-red-500\"></span>\n          <div className=\"flex justify-center\">\n            <button className=\"bg-blue-500 border-gray-500 rounded-lg px-4 py-2 mt-3 text-gray-100 font-sans\">\n              Submit\n            </button>\n          </div>\n        </form>\n        {tags.map((data, id) => {\n          return <Tags tagname={data} id={id} key={id} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./output.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}